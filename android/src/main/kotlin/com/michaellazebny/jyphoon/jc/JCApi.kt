// Autogenerated from Pigeon (v4.2.14), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.michaellazebny.jyphoon.jc

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

/** Generated class from Pigeon. */
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface JCApi {
  /**
   * Returns whether JC was inited.
   *
   * On **Android**:
   * Returns **true** if JCManager.initialize() was successfully called.
   * Otherwise, returns **false** if initialize() was not called or failed.
   */
  fun isInited(): Boolean
  /**
   * Returns bool.
   *
   * Initializes the engine. It is needed to set appKey before. Otherwise, it will fail.
   */
  fun initialize(): Boolean
  /**
   * Returns [Void]
   * Deinitialize the engine. After call this method you can't use call mechanics
   */
  fun uninitialize()
  /** Sets appKey in order to have access to the Jyphoon API. */
  fun setAppKey(appKey: String)
  /**
   * Returns [Void].
   *
   * Takes [String] displayName in.
   *
   * Sets the name that is visible to another participant(s).
   */
  fun setDisplayName(displayName: String)
  /**
   * Returns [bool].
   * Sets account number. It is needed to set appKey before. Otherwise, it will fail.
   */
  fun setAccountNumber(accountNumber: String): Boolean
  /**
   * Returns [Void].
   *
   * Takes [Int] timeout in.
   *
   * Sets the timeout for the call request.
   */
  fun setTimeout(timeout: Long)
  /**
   * Returns [Boolean].
   * Takes [String] confId in. It is the conference identifier.
   * Takes [String] password in. It is the password for the conference.
   * Starts the "call".
   */
  fun confJoin(confId: String, password: String): Boolean
  /**
   * Returns [Void].
   * Takes [String] account in. It is the account identifier of the person you want to call.
   */
  fun setServerAddress(serverAddress: String)
  /**
   * Returns [Void].
   * Starts or stops to send video.
   */
  fun switchVideo()
  /**
   * Returns [Void].
   * Starts or stops to send audio.
   */
  fun switchAudio()
  /**
   * Returns [String].
   * Get current user id
   */
  fun getCurrentUserId(): String?
  /**
   * Returns [Void].
   * Hangs up the "call".
   */
  fun confLeave(): Boolean
  /**
   * Returns [Boolean].
   * True if the user is in the call and is not muted.
   * Otherwise, returns false.
   */
  fun audio(): Boolean
  /**
   * Returns [Boolean].
   * True if the companion is in the call and is not muted.
   * Otherwise, returns false.
   */
  fun otherAudio(): Boolean
  /**
   * Returns [Boolean].
   * True if the user is in the call and shares video.
   * Otherwise, returns false.
   */
  fun video(): Boolean
  /**
   * Returns [Boolean].
   * True if the companion is in the call and shares video.
   * Otherwise, returns false.
   */
  fun otherVideo(): Boolean
  /**
   * Returns [ConferenceStatus].
   * Returns the current conference status.
   * It can be one of the following:
   * - [ConferenceStatus.on]
   * - [ConferenceStatus.off]
   * - [ConferenceStatus.waiting]
   */
  fun confStatus(): String
  /**
   * Returns [Void].
   * Switches the camera.
   */
  fun switchCamera()

  companion object {
    /** The codec used by JCApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
    /** Sets up an instance of `JCApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: JCApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.JCApi.isInited", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped = listOf<Any?>()
            try {
              wrapped = listOf<Any?>(api.isInited())
            } catch (exception: Error) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.JCApi.initialize", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped = listOf<Any?>()
            try {
              wrapped = listOf<Any?>(api.initialize())
            } catch (exception: Error) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.JCApi.uninitialize", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped = listOf<Any?>()
            try {
              api.uninitialize()
              wrapped = listOf<Any?>(null)
            } catch (exception: Error) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.JCApi.setAppKey", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            var wrapped = listOf<Any?>()
            try {
              val args = message as List<Any?>
              val appKeyArg = args[0] as String
              api.setAppKey(appKeyArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Error) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.JCApi.setDisplayName", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            var wrapped = listOf<Any?>()
            try {
              val args = message as List<Any?>
              val displayNameArg = args[0] as String
              api.setDisplayName(displayNameArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Error) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.JCApi.setAccountNumber", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            var wrapped = listOf<Any?>()
            try {
              val args = message as List<Any?>
              val accountNumberArg = args[0] as String
              wrapped = listOf<Any?>(api.setAccountNumber(accountNumberArg))
            } catch (exception: Error) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.JCApi.setTimeout", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            var wrapped = listOf<Any?>()
            try {
              val args = message as List<Any?>
              val timeoutArg = args[0].let { if (it is Int) it.toLong() else it as Long }
              api.setTimeout(timeoutArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Error) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.JCApi.confJoin", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            var wrapped = listOf<Any?>()
            try {
              val args = message as List<Any?>
              val confIdArg = args[0] as String
              val passwordArg = args[1] as String
              wrapped = listOf<Any?>(api.confJoin(confIdArg, passwordArg))
            } catch (exception: Error) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.JCApi.setServerAddress", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            var wrapped = listOf<Any?>()
            try {
              val args = message as List<Any?>
              val serverAddressArg = args[0] as String
              api.setServerAddress(serverAddressArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Error) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.JCApi.switchVideo", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped = listOf<Any?>()
            try {
              api.switchVideo()
              wrapped = listOf<Any?>(null)
            } catch (exception: Error) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.JCApi.switchAudio", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped = listOf<Any?>()
            try {
              api.switchAudio()
              wrapped = listOf<Any?>(null)
            } catch (exception: Error) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.JCApi.getCurrentUserId", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped = listOf<Any?>()
            try {
              wrapped = listOf<Any?>(api.getCurrentUserId())
            } catch (exception: Error) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.JCApi.confLeave", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped = listOf<Any?>()
            try {
              wrapped = listOf<Any?>(api.confLeave())
            } catch (exception: Error) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.JCApi.audio", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped = listOf<Any?>()
            try {
              wrapped = listOf<Any?>(api.audio())
            } catch (exception: Error) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.JCApi.otherAudio", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped = listOf<Any?>()
            try {
              wrapped = listOf<Any?>(api.otherAudio())
            } catch (exception: Error) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.JCApi.video", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped = listOf<Any?>()
            try {
              wrapped = listOf<Any?>(api.video())
            } catch (exception: Error) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.JCApi.otherVideo", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped = listOf<Any?>()
            try {
              wrapped = listOf<Any?>(api.otherVideo())
            } catch (exception: Error) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.JCApi.confStatus", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped = listOf<Any?>()
            try {
              wrapped = listOf<Any?>(api.confStatus())
            } catch (exception: Error) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.JCApi.switchCamera", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped = listOf<Any?>()
            try {
              api.switchCamera()
              wrapped = listOf<Any?>(null)
            } catch (exception: Error) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class JcReceiver(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by JcReceiver. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
  }
  fun onEvent(eventArg: String, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.JcReceiver.onEvent", codec)
    channel.send(listOf(eventArg)) {
      callback()
    }
  }
}

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any> {
  return listOf<Any>(
    exception.javaClass.simpleName,
    exception.toString(),
    "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
  )
}
