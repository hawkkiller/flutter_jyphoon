// Autogenerated from Pigeon (v4.2.8), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.michaellazebny.jyphoon.jc

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

/** Generated class from Pigeon. */
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface JCApi {
  /**
   * Returns whether JC was inited.
   *
   * On **Android**:
   * Returns **true** if JCManager.initialize() was successfully called.
   * Otherwise, returns **false** if initialize() was not called or failed.
   */
  fun isInited(): Boolean
  /**
   * Returns bool.
   *
   * Initializes the engine. It is needed to set appKey before. Otherwise, it will fail.
   */
  fun initialize(): Boolean
  /**
   * Returns [Void]
   * Deinitialize the engine. After call this method you can't use call mechanics
   */
  fun uninitialize()
  /** Sets appKey in order to have access to the Jyphoon API. */
  fun setAppKey(appKey: String)
  /**
   * Returns [Void].
   *
   * Takes [String] displayName in.
   *
   * Sets the name that is visible to another participant(s).
   */
  fun setDisplayName(displayName: String)
  /**
   * Returns [bool].
   * Sets account number. It is needed to set appKey before. Otherwise, it will fail.
   */
  fun setAccountNumber(accountNumber: String): Boolean
  /**
   * Returns [Void].
   *
   * Takes [Int] timeout in.
   *
   * Sets the timeout for the call request.
   */
  fun setTimeout(timeout: Long)
  /**
   * Returns [Void].
   * Takes [String] account in. It is the account identifier of the person you want to call.
   * Takes [bool] video in. It is the type of call you want to make. If true, it will be a video call.
   *
   * Makes a call to the specified account.
   * If [JCCall.call] returns true then the call started.
   */
  fun startCall(accountNumber: String, video: Boolean, ticket: String): Boolean
  fun confJoin(confId: String, password: String): Boolean
  /**
   * Returns [Void].
   * Starts or stops to send video.
   */
  fun updateSelfVideo(value: Boolean)
  /** Returns [Void]. */
  fun updateOtherVideo(value: Boolean)
  /** Returns [Void]. */
  fun updateSelfVoice(value: Boolean)
  /** Returns [Void]. */
  fun updateOtherVoice(value: Boolean)
  /**
   * Returns [Void].
   * Takes [String] account in. It is the account identifier of the person you want to call.
   */
  fun setServerAddress(serverAddress: String)
  /**
   * Returns [Void].
   * Answers call
   */
  fun answerCall()
  /**
   * Returns [String].
   * Get current user id
   */
  fun getCurrentUserId(): String?

  companion object {
    /** The codec used by JCApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
    /** Sets up an instance of `JCApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: JCApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.JCApi.isInited", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped = hashMapOf<String, Any?>()
            try {
              wrapped["result"] = api.isInited()
            } catch (exception: Error) {
              wrapped["error"] = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.JCApi.initialize", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped = hashMapOf<String, Any?>()
            try {
              wrapped["result"] = api.initialize()
            } catch (exception: Error) {
              wrapped["error"] = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.JCApi.uninitialize", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped = hashMapOf<String, Any?>()
            try {
              api.uninitialize()
              wrapped["result"] = null
            } catch (exception: Error) {
              wrapped["error"] = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.JCApi.setAppKey", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val wrapped = hashMapOf<String, Any?>()
            try {
              val args = message as List<Any?>
              val appKeyArg = args[0] as String
              api.setAppKey(appKeyArg)
              wrapped["result"] = null
            } catch (exception: Error) {
              wrapped["error"] = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.JCApi.setDisplayName", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val wrapped = hashMapOf<String, Any?>()
            try {
              val args = message as List<Any?>
              val displayNameArg = args[0] as String
              api.setDisplayName(displayNameArg)
              wrapped["result"] = null
            } catch (exception: Error) {
              wrapped["error"] = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.JCApi.setAccountNumber", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val wrapped = hashMapOf<String, Any?>()
            try {
              val args = message as List<Any?>
              val accountNumberArg = args[0] as String
              wrapped["result"] = api.setAccountNumber(accountNumberArg)
            } catch (exception: Error) {
              wrapped["error"] = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.JCApi.setTimeout", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val wrapped = hashMapOf<String, Any?>()
            try {
              val args = message as List<Any?>
              val timeoutArg = args[0].let { if (it is Int) it.toLong() else it as Long }
              api.setTimeout(timeoutArg)
              wrapped["result"] = null
            } catch (exception: Error) {
              wrapped["error"] = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.JCApi.startCall", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val wrapped = hashMapOf<String, Any?>()
            try {
              val args = message as List<Any?>
              val accountNumberArg = args[0] as String
              val videoArg = args[1] as Boolean
              val ticketArg = args[2] as String
              wrapped["result"] = api.startCall(accountNumberArg, videoArg, ticketArg)
            } catch (exception: Error) {
              wrapped["error"] = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.JCApi.confJoin", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val wrapped = hashMapOf<String, Any?>()
            try {
              val args = message as List<Any?>
              val confIdArg = args[0] as String
              val passwordArg = args[1] as String
              wrapped["result"] = api.confJoin(confIdArg, passwordArg)
            } catch (exception: Error) {
              wrapped["error"] = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.JCApi.updateSelfVideo", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val wrapped = hashMapOf<String, Any?>()
            try {
              val args = message as List<Any?>
              val valueArg = args[0] as Boolean
              api.updateSelfVideo(valueArg)
              wrapped["result"] = null
            } catch (exception: Error) {
              wrapped["error"] = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.JCApi.updateOtherVideo", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val wrapped = hashMapOf<String, Any?>()
            try {
              val args = message as List<Any?>
              val valueArg = args[0] as Boolean
              api.updateOtherVideo(valueArg)
              wrapped["result"] = null
            } catch (exception: Error) {
              wrapped["error"] = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.JCApi.updateSelfVoice", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val wrapped = hashMapOf<String, Any?>()
            try {
              val args = message as List<Any?>
              val valueArg = args[0] as Boolean
              api.updateSelfVoice(valueArg)
              wrapped["result"] = null
            } catch (exception: Error) {
              wrapped["error"] = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.JCApi.updateOtherVoice", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val wrapped = hashMapOf<String, Any?>()
            try {
              val args = message as List<Any?>
              val valueArg = args[0] as Boolean
              api.updateOtherVoice(valueArg)
              wrapped["result"] = null
            } catch (exception: Error) {
              wrapped["error"] = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.JCApi.setServerAddress", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val wrapped = hashMapOf<String, Any?>()
            try {
              val args = message as List<Any?>
              val serverAddressArg = args[0] as String
              api.setServerAddress(serverAddressArg)
              wrapped["result"] = null
            } catch (exception: Error) {
              wrapped["error"] = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.JCApi.answerCall", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped = hashMapOf<String, Any?>()
            try {
              api.answerCall()
              wrapped["result"] = null
            } catch (exception: Error) {
              wrapped["error"] = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.JCApi.getCurrentUserId", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped = hashMapOf<String, Any?>()
            try {
              wrapped["result"] = api.getCurrentUserId()
            } catch (exception: Error) {
              wrapped["error"] = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class JcReceiver(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by JcReceiver. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
  }
  fun onVideoChange(valueArg: Boolean, selfArg: Boolean, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.JcReceiver.onVideoChange", codec)
    channel.send(listOf(valueArg, selfArg)) {
      callback()
    }
  }
  fun onVoiceChange(valueArg: Boolean, selfArg: Boolean, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.JcReceiver.onVoiceChange", codec)
    channel.send(listOf(valueArg, selfArg)) {
      callback()
    }
  }
}

private fun wrapResult(result: Any?): Map<String, Any?> {
  return hashMapOf("result" to result)
}

private fun wrapError(exception: Throwable): Map<String, Any> {
  return hashMapOf<String, Any>(
    "error" to hashMapOf<String, Any>(
      "code" to exception.javaClass.simpleName,
      "message" to exception.toString(),
      "details" to "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  )
}
