// Autogenerated from Pigeon (v4.2.14), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif


/// Generated class from Pigeon.

enum CallType: Int {
  case oneToOne = 0
  case group = 1
}
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol JyphoonInitializationApi {
  /// Returns whether jyphoon sdk was inited.
  func isInited() -> Bool
  /// Initializes the engine.
  ///
  /// It is needed to call [setAppKey] before.
  func initialize() -> Bool
  /// Sets appKey for the SDK.
  func setAppKey(appKey: String)
  /// Sets the name that is visible to another participant(s).
  func setDisplayName(displayName: String)
  /// Sets account number. It acts like uuid. It launches login process.
  ///
  /// It is needed to call [setAppKey] before.
  func setAccountNumber(accountNumber: String) -> Bool
  /// Sets the timeout for the call request.
  func setTimeout(timeout: Int32)
  /// Set Jyphoon backend server address.
  func setServerAddress(serverAddress: String)
  /// Get current user id
  func getCurrentUserId() -> String?
  func clientState() -> Int32
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class JyphoonInitializationApiSetup {
  /// The codec used by JyphoonInitializationApi.
  /// Sets up an instance of `JyphoonInitializationApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: JyphoonInitializationApi?) {
    /// Returns whether jyphoon sdk was inited.
    let isInitedChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.JyphoonInitializationApi.isInited", binaryMessenger: binaryMessenger)
    if let api = api {
      isInitedChannel.setMessageHandler { _, reply in
        let result = api.isInited()
        reply(wrapResult(result))
      }
    } else {
      isInitedChannel.setMessageHandler(nil)
    }
    /// Initializes the engine.
    ///
    /// It is needed to call [setAppKey] before.
    let initializeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.JyphoonInitializationApi.initialize", binaryMessenger: binaryMessenger)
    if let api = api {
      initializeChannel.setMessageHandler { _, reply in
        let result = api.initialize()
        reply(wrapResult(result))
      }
    } else {
      initializeChannel.setMessageHandler(nil)
    }
    /// Sets appKey for the SDK.
    let setAppKeyChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.JyphoonInitializationApi.setAppKey", binaryMessenger: binaryMessenger)
    if let api = api {
      setAppKeyChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let appKeyArg = args[0] as! String
        api.setAppKey(appKey: appKeyArg)
        reply(wrapResult(nil))
      }
    } else {
      setAppKeyChannel.setMessageHandler(nil)
    }
    /// Sets the name that is visible to another participant(s).
    let setDisplayNameChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.JyphoonInitializationApi.setDisplayName", binaryMessenger: binaryMessenger)
    if let api = api {
      setDisplayNameChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let displayNameArg = args[0] as! String
        api.setDisplayName(displayName: displayNameArg)
        reply(wrapResult(nil))
      }
    } else {
      setDisplayNameChannel.setMessageHandler(nil)
    }
    /// Sets account number. It acts like uuid. It launches login process.
    ///
    /// It is needed to call [setAppKey] before.
    let setAccountNumberChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.JyphoonInitializationApi.setAccountNumber", binaryMessenger: binaryMessenger)
    if let api = api {
      setAccountNumberChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let accountNumberArg = args[0] as! String
        let result = api.setAccountNumber(accountNumber: accountNumberArg)
        reply(wrapResult(result))
      }
    } else {
      setAccountNumberChannel.setMessageHandler(nil)
    }
    /// Sets the timeout for the call request.
    let setTimeoutChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.JyphoonInitializationApi.setTimeout", binaryMessenger: binaryMessenger)
    if let api = api {
      setTimeoutChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let timeoutArg = args[0] as! Int32
        api.setTimeout(timeout: timeoutArg)
        reply(wrapResult(nil))
      }
    } else {
      setTimeoutChannel.setMessageHandler(nil)
    }
    /// Set Jyphoon backend server address.
    let setServerAddressChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.JyphoonInitializationApi.setServerAddress", binaryMessenger: binaryMessenger)
    if let api = api {
      setServerAddressChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let serverAddressArg = args[0] as! String
        api.setServerAddress(serverAddress: serverAddressArg)
        reply(wrapResult(nil))
      }
    } else {
      setServerAddressChannel.setMessageHandler(nil)
    }
    /// Get current user id
    let getCurrentUserIdChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.JyphoonInitializationApi.getCurrentUserId", binaryMessenger: binaryMessenger)
    if let api = api {
      getCurrentUserIdChannel.setMessageHandler { _, reply in
        let result = api.getCurrentUserId()
        reply(wrapResult(result))
      }
    } else {
      getCurrentUserIdChannel.setMessageHandler(nil)
    }
    let clientStateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.JyphoonInitializationApi.clientState", binaryMessenger: binaryMessenger)
    if let api = api {
      clientStateChannel.setMessageHandler { _, reply in
        let result = api.clientState()
        reply(wrapResult(result))
      }
    } else {
      clientStateChannel.setMessageHandler(nil)
    }
  }
}
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol JyphoonCallApi {
  /// Starts the "call".
  /// Returns true if the call was started successfully.
  ///
  /// [destination] - the identifier of the companion or the conference.
  ///
  /// [password] - the password for the conference.
  ///
  /// [video] - initiate call as videocall or audiocall.
  ///
  /// [type] - oneToOne or group.
  func call(destination: String, password: String, video: Bool, did: String, type: CallType, ts: Int32) -> Bool
  /// Returns CallStatus.
  /// Returns the current call status.
  /// It can be one of the following:
  /// - CallStatus.on
  /// - CallStatus.off
  /// - CallStatus.waiting
  func callStatus() -> String
  /// True if the user is in the call and is not muted.
  /// Otherwise, returns false.
  func audio() -> Bool
  /// True if the user is in the call and shares video.
  /// Otherwise, returns false.
  func video() -> Bool
  /// True if the companion is in the call and is not muted.
  /// Otherwise, returns false.
  func otherAudio() -> Bool
  /// True if the companion is in the call and shares video.
  /// Otherwise, returns false.
  func otherVideo() -> Bool
  /// Hangs up the call or leaves the conference
  /// depending on the call type.
  func leave() -> Bool
  /// Switches the camera (front/back)
  func switchCamera()
  /// Enables \ disables video.
  func setVideo(video: Bool)
  /// Enables \ disables audio.
  func setAudio(audio: Bool)
  /// Enables \ disables speaker.
  func setSpeaker(speaker: Bool)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class JyphoonCallApiSetup {
  /// The codec used by JyphoonCallApi.
  /// Sets up an instance of `JyphoonCallApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: JyphoonCallApi?) {
    /// Starts the "call".
    /// Returns true if the call was started successfully.
    ///
    /// [destination] - the identifier of the companion or the conference.
    ///
    /// [password] - the password for the conference.
    ///
    /// [video] - initiate call as videocall or audiocall.
    ///
    /// [type] - oneToOne or group.
    let callChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.JyphoonCallApi.call", binaryMessenger: binaryMessenger)
    if let api = api {
      callChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let destinationArg = args[0] as! String
        let passwordArg = args[1] as! String
        let videoArg = args[2] as! Bool
        let didArg = args[3] as! String
        let typeArg = CallType(rawValue: args[4] as! Int)!
        let tsArg = args[5] as! Int32
        let result = api.call(destination: destinationArg, password: passwordArg, video: videoArg, did: didArg, type: typeArg, ts: tsArg)
        reply(wrapResult(result))
      }
    } else {
      callChannel.setMessageHandler(nil)
    }
    /// Returns CallStatus.
    /// Returns the current call status.
    /// It can be one of the following:
    /// - CallStatus.on
    /// - CallStatus.off
    /// - CallStatus.waiting
    let callStatusChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.JyphoonCallApi.callStatus", binaryMessenger: binaryMessenger)
    if let api = api {
      callStatusChannel.setMessageHandler { _, reply in
        let result = api.callStatus()
        reply(wrapResult(result))
      }
    } else {
      callStatusChannel.setMessageHandler(nil)
    }
    /// True if the user is in the call and is not muted.
    /// Otherwise, returns false.
    let audioChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.JyphoonCallApi.audio", binaryMessenger: binaryMessenger)
    if let api = api {
      audioChannel.setMessageHandler { _, reply in
        let result = api.audio()
        reply(wrapResult(result))
      }
    } else {
      audioChannel.setMessageHandler(nil)
    }
    /// True if the user is in the call and shares video.
    /// Otherwise, returns false.
    let videoChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.JyphoonCallApi.video", binaryMessenger: binaryMessenger)
    if let api = api {
      videoChannel.setMessageHandler { _, reply in
        let result = api.video()
        reply(wrapResult(result))
      }
    } else {
      videoChannel.setMessageHandler(nil)
    }
    /// True if the companion is in the call and is not muted.
    /// Otherwise, returns false.
    let otherAudioChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.JyphoonCallApi.otherAudio", binaryMessenger: binaryMessenger)
    if let api = api {
      otherAudioChannel.setMessageHandler { _, reply in
        let result = api.otherAudio()
        reply(wrapResult(result))
      }
    } else {
      otherAudioChannel.setMessageHandler(nil)
    }
    /// True if the companion is in the call and shares video.
    /// Otherwise, returns false.
    let otherVideoChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.JyphoonCallApi.otherVideo", binaryMessenger: binaryMessenger)
    if let api = api {
      otherVideoChannel.setMessageHandler { _, reply in
        let result = api.otherVideo()
        reply(wrapResult(result))
      }
    } else {
      otherVideoChannel.setMessageHandler(nil)
    }
    /// Hangs up the call or leaves the conference
    /// depending on the call type.
    let leaveChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.JyphoonCallApi.leave", binaryMessenger: binaryMessenger)
    if let api = api {
      leaveChannel.setMessageHandler { _, reply in
        let result = api.leave()
        reply(wrapResult(result))
      }
    } else {
      leaveChannel.setMessageHandler(nil)
    }
    /// Switches the camera (front/back)
    let switchCameraChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.JyphoonCallApi.switchCamera", binaryMessenger: binaryMessenger)
    if let api = api {
      switchCameraChannel.setMessageHandler { _, reply in
        api.switchCamera()
        reply(wrapResult(nil))
      }
    } else {
      switchCameraChannel.setMessageHandler(nil)
    }
    /// Enables \ disables video.
    let setVideoChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.JyphoonCallApi.setVideo", binaryMessenger: binaryMessenger)
    if let api = api {
      setVideoChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let videoArg = args[0] as! Bool
        api.setVideo(video: videoArg)
        reply(wrapResult(nil))
      }
    } else {
      setVideoChannel.setMessageHandler(nil)
    }
    /// Enables \ disables audio.
    let setAudioChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.JyphoonCallApi.setAudio", binaryMessenger: binaryMessenger)
    if let api = api {
      setAudioChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let audioArg = args[0] as! Bool
        api.setAudio(audio: audioArg)
        reply(wrapResult(nil))
      }
    } else {
      setAudioChannel.setMessageHandler(nil)
    }
    /// Enables \ disables speaker.
    let setSpeakerChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.JyphoonCallApi.setSpeaker", binaryMessenger: binaryMessenger)
    if let api = api {
      setSpeakerChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let speakerArg = args[0] as! Bool
        api.setSpeaker(speaker: speakerArg)
        reply(wrapResult(nil))
      }
    } else {
      setSpeakerChannel.setMessageHandler(nil)
    }
  }
}
/// Generated class from Pigeon that represents Flutter messages that can be called from Swift.
class JyphoonReceiver {
  private let binaryMessenger: FlutterBinaryMessenger
  init(binaryMessenger: FlutterBinaryMessenger){
    self.binaryMessenger = binaryMessenger
  }
  /// Called when the call status changes.
  func onEvent(event eventArg: String, data dataArg: [String?: Any?], completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.JyphoonReceiver.onEvent", binaryMessenger: binaryMessenger)
    channel.sendMessage([eventArg, dataArg]) { _ in
      completion()
    }
  }
}
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol CompanionViewApi {
  func setCompanionFrame(width: Double, height: Double)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class CompanionViewApiSetup {
  /// The codec used by CompanionViewApi.
  /// Sets up an instance of `CompanionViewApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: CompanionViewApi?) {
    let setCompanionFrameChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.CompanionViewApi.setCompanionFrame", binaryMessenger: binaryMessenger)
    if let api = api {
      setCompanionFrameChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let widthArg = args[0] as! Double
        let heightArg = args[1] as! Double
        api.setCompanionFrame(width: widthArg, height: heightArg)
        reply(wrapResult(nil))
      }
    } else {
      setCompanionFrameChannel.setMessageHandler(nil)
    }
  }
}
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol SelfViewApi {
  func setSelfFrame(width: Double, height: Double)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class SelfViewApiSetup {
  /// The codec used by SelfViewApi.
  /// Sets up an instance of `SelfViewApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: SelfViewApi?) {
    let setSelfFrameChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.SelfViewApi.setSelfFrame", binaryMessenger: binaryMessenger)
    if let api = api {
      setSelfFrameChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let widthArg = args[0] as! Double
        let heightArg = args[1] as! Double
        api.setSelfFrame(width: widthArg, height: heightArg)
        reply(wrapResult(nil))
      }
    } else {
      setSelfFrameChannel.setMessageHandler(nil)
    }
  }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: FlutterError) -> [Any?] {
  return [
    error.code,
    error.message,
    error.details
  ]
}
